#!pip install celltypist
!pip install scanpy
import numpy as np
import pandas as pd
import matplotlib.pyplot as pl
import scanpy as sc
import anndata
from scipy.sparse import coo_matrix, csr_matrix
import os
from scipy import io
import matplotlib.pyplot as plt


X = io.mmread('matrix.mtx')
adata = anndata.AnnData(X=X.transpose().tocsr())
metadata = pd.read_csv('metadata.csv')
with open('gene_names.csv', 'r') as f:
    gene_names = f.read().splitlines()


adata.obs = metadata
adata.obs.index = adata.obs['barcodes']
adata.var.index = gene_names

sc.pp.calculate_qc_metrics(adata, percent_top=None, log1p=False, inplace=True)
sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
sc.pp.scale(adata, max_value=10)


harmony = pd.read_csv('harmony.csv')
harmony.index = adata.obs.index 
adata.obsm['X_harmony'] = harmony.to_numpy()
sc.pp.neighbors(adata, use_rep="X_harmony")

import celltypist
from celltypist import models

models.models_description()

predictions = celltypist.annotate(adata, model = 'Immune_All_High.pkl', majority_voting = True)

predictions.predicted_labels
adata_predicted = predictions.to_adata()


sc.pl.umap(adata_predicted, color = 'level_2')
sc.pl.umap(adata_predicted, color = 'majority_voting')

all_unique_classes = np.unique(np.concatenate((adata_predicted.obs['level_2'].unique(), adata_predicted.obs['majority_voting'].unique())))
confusion_matrix = metrics.confusion_matrix(adata_predicted.obs['level_2'], adata_predicted.obs['majority_voting'])
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = all_unique_classes)

def plot_confusion_matrix(cm, classes, title='Confusion Matrix', cmap=plt.cm.Blues):

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45, ha="right")  # Adjust rotation angle and horizontal alignment
    plt.yticks(tick_marks, classes)

    plt.tight_layout()
    plt.xlabel('CellTypist Label')
    plt.ylabel('Anndata Label')

plot_confusion_matrix(confusion_matrix, classes=all_unique_classes, title='Confusion Matrix')
plt.savefig("ConfusionMatrix.pdf", format="pdf")
plt.show()


sc.pl.umap(adata_predicted, color = 'level_3')
sc.pl.umap(adata_predicted, color = 'predicted_labels')


from collections import Counter

#Filter Labels
all_unique_classes_high = np.unique(np.concatenate((adata_predicted.obs['level_3'].unique(), adata_predicted.obs['predicted_labels'].unique())))
label_counts_high = Counter(np.concatenate((adata_predicted.obs['level_3'], adata_predicted.obs['predicted_labels'])))
filtered_labels_high = [label for label, count in label_counts_high.items() if count > 1 and count > 1000]

#Filter Confusion Matrix
cm = metrics.confusion_matrix(adata_predicted.obs['level_3'], adata_predicted.obs['predicted_labels'], labels = filtered_labels_high)

#Plot Confusion Matrix
plot_confusion_matrix(cm, classes=filtered_labels_high, title='Filtered Confusion Matrix')
plt.savefig("FilteredConfusionMatrixHigh.pdf", format="pdf")
plt.show()
